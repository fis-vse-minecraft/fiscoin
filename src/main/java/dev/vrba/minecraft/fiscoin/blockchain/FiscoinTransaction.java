package dev.vrba.minecraft.fiscoin.blockchain;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import org.apache.commons.codec.binary.Hex;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.jetbrains.annotations.NotNull;

import java.security.*;
import java.util.UUID;

@Getter
@AllArgsConstructor
@EqualsAndHashCode
public class FiscoinTransaction {

    /**
     * Unique transaction ID
     */
    private final UUID id;

    /**
     * Address (PK) of the sender
     */
    private final PublicKey sender;

    /**
     * Address (PK) of the receiver
     */
    private final PublicKey receiver;

    /**
     * Amount of ùîΩ sender is transferring to receiver
     */
    private final double value;

    /**
     * Signature generated by sender's private key based on the transaction hash
     */
    private byte[] signature;

    public FiscoinTransaction(@NotNull PublicKey sender, @NotNull PublicKey receiver, double value) {
        this(UUID.randomUUID(), sender, receiver, value);
    }

    public FiscoinTransaction(@NotNull UUID id, @NotNull PublicKey sender, @NotNull PublicKey receiver, double value) {
        this.id = id;
        this.sender = sender;
        this.receiver = receiver;
        this.value = value;
    }

    public FiscoinTransaction sign(@NotNull PrivateKey key) {
        try {
            String input = Hex.encodeHexString(sender.getEncoded()) +
                    Hex.encodeHexString(receiver.getEncoded()) +
                    value;

            Signature signature = Signature.getInstance("SHA256withRSA");

            signature.initSign(key);
            signature.update(input.getBytes());

            this.signature = signature.sign();
            return this;
        }
        catch (Exception exception) {
            throw new RuntimeException(exception);
        }
    }

    public boolean verify() {
        try {
            String input = Hex.encodeHexString(sender.getEncoded()) +
                    Hex.encodeHexString(receiver.getEncoded()) +
                    value;

            Signature signature = Signature.getInstance("SHA256withRSA");

            signature.initVerify(sender);
            signature.update(input.getBytes());

            return signature.verify(this.signature);
        }
        catch (Exception exception) {
            throw new RuntimeException(exception);
        }
    }
}
